//SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;

///@title Gili Sasportas
///@dev change and set owner

contract Owner{

    address private owner;
    //event
    event OwnerSet(address indexed oldOwner, address indexed newOwner);
    modifier isOwner(){ 
        //if the require evaluates to false ,this finish
        //it is often a good to check if the function are called correctly;
        require(msg.sender==owner,"Caller is not owner");
        _;
    }

    ///@dev Set contract deployer as owner
    constructor(){
        owner = msg.sender;
        //what is emit?
        //what is address(0)?
        emit OwnerSet(address(0),owner);

    }
    ///@dev change owner
    //@param -The new address of the owner
    function changeOwner(address newOwner) public isOwner{
        emit OwnerSet(owner, newOwner);
        owner=newOwner;
    }

    //@dev- return address of owner
    //@return address of owner

    function getOwner() external view returns (address){
        return owner;
    }


}
